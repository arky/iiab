# 0. CLEAN UP PRIOR VERSIONS OF SUGARIZER (NEEDS WORK!)

- name: Wipe /library/www/html/sugarizer* if installing sugarizer-1.0
  shell: "rm -rf {{ doc_root }}/sugarizer*"
  when: sugarizer_version == "sugarizer-1.0"

# 1. DOWNLOAD /opt/iiab/sugarizer

- name: Clone llaske/sugarizer ({{ sugarizer_git_version }}) from GitHub to /opt/iiab
  git:
    repo: https://github.com/llaske/sugarizer
    dest: "{{ sugarizer_location }}/{{ sugarizer_version }}"
    version: "{{ sugarizer_git_version }}"
    force: yes
    depth: 1
  when: internet_available

- name: Create symbolic link /opt/iiab/sugarizer -> /opt/iiab/{{ sugarizer_version }}
  file:
    src: "{{ sugarizer_location }}/{{ sugarizer_version }}"
    dest: "{{ sugarizer_location }}/sugarizer"
    state: link

# 2. DOWNLOAD /opt/iiab/sugarizer-server

# July 2018: http://download.iiab.io/packages/sugarizer-server-1.0.tar.gz
# was flawed, as documented at:
#    https://github.com/iiab/iiab/pull/814#issuecomment-404211098
# Versions of MongoDB, npm (& Node.js ?) matter!  Sugarizer 1.0 Context:
#    https://github.com/iiab/iiab/issues/798
# Going forward let's "git clone" IIAB's preferred versions, of sugarizer
# AND sugarizer-server, as specified in roles/sugarizer/defaults/main.yml

# 2018-07-14 BLOAT: git works well BUT even with "depth: 1"
# - 229MB is unfort downloaded to /opt/iiab/sugarizer/.git
# - 1.4MB is unfort downloaded to /opt/iiab/sugarizer-server/.git

- name: Clone llaske/sugarizer-server ({{ sugarizer_server_git_version }}) from GitHub to /opt/iiab
  git:
    repo: https://github.com/llaske/sugarizer-server
    dest: "{{ sugarizer_location }}/{{ sugarizer_server_version }}"
    version: "{{ sugarizer_server_git_version }}"
    force: yes
    depth: 1
  when: internet_available

- name: Create symbolic link /opt/iiab/sugarizer-server -> /opt/iiab/{{ sugarizer_server_version }}
  file:
    src: "{{ sugarizer_location }}/{{ sugarizer_server_version }}"
    dest: "{{ sugarizer_location }}/sugarizer-server"
    state: link

# 3. INSTALL A GOOD VERSION OF Node.js AND npm

- name: Set up Node.js 8.x apt sources (debuntu, but avoid ubuntu-18)
  shell: curl -sL https://deb.nodesource.com/setup_8.x | bash -
  when: internet_available and is_debuntu and not is_ubuntu_18

- name: Install latest Node.js which includes /usr/bin/npm (debuntu, but avoid ubuntu-18)
  package:
    name: nodejs
    # name: nodejs=8.x
    state: latest
    # state: present
  when: internet_available and is_debuntu and not is_ubuntu_18

# 2018-07-14: Raspbian (apt offers npm 1.4.21) & Debian 9 (apt offers no npm!)
# STILL NEED the above nodesource.com approach to get a version of npm that
# works with Sugarizer, as documented at:
# https://github.com/iiab/iiab/issues/798#issuecomment-404324530

# FYI this nodesource.com approach (brings in npm 5.6.0 with nodejs 8.11.3
# for now) would also work on Ubuntu 18.04, and might even bring about a
# more sane consistency between mainline OS's?
# 
# But For Now: Ubuntu 18.04's apt (approach below) brings in npm 3.5.2,
# which appears suffic "SO FAR"?  18.04's nodejs 8.10.0 is more reassuring!

# Crazy Aside: some versions of npm can upgrade themselves to the latest
# (6.1.0 for now) using command "npm install -g npm", but careful as it
# ends up in /usr/local/bin causing future/pkg management issues:
# https://askubuntu.com/questions/1036278/npm-is-incorrect-version-on-latest-ubuntu-18-04-installation

- name: Install Node.js and npm (ubuntu-18 or not debuntu)
  package:
    name: "{{ item }}"
    state: latest
  when: internet_available and (is_ubuntu_18 or not is_debuntu)
  with_items:
    - nodejs
    - npm

# 4. RUN "npm install" TO POPULATE ~35MB /opt/iiab/sugarizer-server/node_modules

# Re-running "npm install" USED TO fail on Raspbian 9 if not other OS's.
# Several strategies to avoid re-running it:
# OLD WAY 1: test & set flag node_modules_exists: True
# OLD WAY 2: "creates: ..." checks for non-existence of /opt/iiab/sugarizer-server-1.0/node_modules
# OLD WAY 3: set "register: git_sug_server_output" above, then as nec delete /opt/iiab/sugarizer-server-1.0/node_modules "when: git_sug_server_output.changed" and as nec run "npm install"

# NEW WAY: run "npm install" every time, as modern versions of npm are
# incremental, with sanity checks (as tested with npm 3.5.2 and 5.6.0)

#- name: Check for /opt/iiab/{{ sugarizer_server_version }}/node_modules
#  stat:
#    path: "{{ sugarizer_location }}/{{ sugarizer_server_version }}/node_modules"
#  register: nmtest
#  ignore_errors: true
#
#- name: Set a flag to prevent re-running of "npm install"
#  set_fact:
#    node_modules_exists: True
#  when: nmtest.stat is defined and nmtest.stat.exists

#- name: Create the express framework for Node.js (OS's other than Fedora 18)
- name: Run 'npm install' to create /opt/iiab/{{ sugarizer_server_version }}/node_modules (CAN TAKE SEVERAL MINUTES)
  command: npm install    # slightly safer than "shell:"
  args:
    chdir: "{{ sugarizer_location }}/{{  sugarizer_server_version }}"
#   creates: "{{ sugarizer_location }}/{{ sugarizer_server_version }}/node_modules"    # OLD WAY 2
# when: git_sug_server_output.changed    # OLD WAY 3
# when: not is_F18 and not node_modules_exists    # OLD WAY 1

#- name: Create the express framework for Node.js (Fedora 18)
#  shell: npm install
#  args:
#    chdir: "{{ sugarizer_location }}/sugarizer/server"
#  when: is_F18 and not node_modules_exists

# 5. PLACE CONFIG FILES

- name: Configure sugarizer.service (systemd), sugarizer.conf (Apache) and sugarizer.ini
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: root
  with_items:
    - { src: 'sugarizer.service.j2', dest: '/etc/systemd/system/sugarizer.service', mode: '0644' }
    - { src: 'sugarizer.ini', dest: '{{ sugarizer_location }}/{{ sugarizer_server_version }}/env/sugarizer.ini', mode: '0644' }
    - { src: 'sugarizer.conf', dest: '/etc/apache2/sites-available', mode: '0644' }

- name: Create symlink for short URL http://box/sugarizer
  file:
    src: /etc/apache2/sites-available/sugarizer.conf
    dest: /etc/apache2/sites-enabled/sugarizer.conf
    state: link

# 6. RESTART/STOP SYSTEMD SERVICE

- name: Enable services (all OS's)
  service:
    name: "{{ item.name }}"
    enabled: yes
    state: restarted
  with_items:
#   - { name: mongodb }    # 2018-07-14: NICE TRY, but still doesn't bring http://box:8089 to life reliably, as a reboot usually does!  (Is a daemon-reload or some such nec?)
    - { name: sugarizer }
  when: sugarizer_enabled

- name: Disable service (all OS's)
  service:
    name: "{{ item.name }}"
    enabled: no
    state: stopped
  with_items:
    - { name: sugarizer }
  when: not sugarizer_enabled

- name: Add 'sugarizer' to list of services at /etc/iiab/iiab.ini
  ini_file:
    dest: "{{ service_filelist }}"
    section: sugarizer
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - option: name
      value: Sugarizer
    - option: description
      value: '"The Sugar Learning Platform began with the famous One Laptop Per Child project, written in Python. Sugarizer is the new HTML/JavaScript implementation of Sugar, usable in most all browsers."'
    - option: enabled
      value: "{{ sugarizer_enabled }}"
